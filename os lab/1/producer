#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

#define BUFFER_SIZE 10

int buffer[BUFFER_SIZE];
int in = 0, out = 0;
sem_t empty, full, mutex;

void* producer(void* arg) {
    int item;
    while(1) {
        item = rand() % 100; // Produce an item
        sem_wait(&empty); // Decrease empty count
        sem_wait(&mutex); // Enter critical section

        buffer[in] = item;
        printf("Produced: %d\n", item);
        in = (in + 1) % BUFFER_SIZE;

        sem_post(&mutex); // Exit critical section
        sem_post(&full); // Increase full count

        sleep(1); // Simulate time taken to produce an item
    }
}

void* consumer(void* arg) {
    int item;
    while(1) {
        sem_wait(&full); // Decrease full count
        sem_wait(&mutex); // Enter critical section

        item = buffer[out];
        printf("Consumed: %d\n", item);
        out = (out + 1) % BUFFER_SIZE;

        sem_post(&mutex); // Exit critical section
        sem_post(&empty); // Increase empty count

        sleep(1); // Simulate time taken to consume an item
    }
}

int main() {
    pthread_t prod, cons;

    // Initialize semaphores
    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);
    sem_init(&mutex, 0, 1);

    // Create producer and consumer threads
    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);

    // Join threads (though in this infinite loop example, they won't terminate)
    pthread_join(prod, NULL);
    pthread_join(cons, NULL);

    // Destroy semaphores (not reached in this example)
    sem_destroy(&empty);
    sem_destroy(&full);
    sem_destroy(&mutex);

    return 0;
}
